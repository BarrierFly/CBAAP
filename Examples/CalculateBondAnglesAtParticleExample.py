# Boilerplate code generated by OVITO Pro 3.9.0-dev-HEAD-d7dda703
from ovito.io import *
from ovito.modifiers import *
from ovito.data import *
from ovito.pipeline import *
import numpy as np 
from CalculateBondAnglesAtParticle import CalculateBondAnglesAtParticle

def create(frame: int, data: DataCollection):
    
    # Create the Particles data object (unless it already exists from a previous run) and fill
    # the 'Position' property array with coordinates of three particles.
    particles = data.create_particles(count=13)
    particles.create_property('Position', data=[[1.02639961e+00, 0.00000000e+00, 3.71433515e+00],
        [4.07879829e+00, 1.37660026e-01, 2.91868407e+00],
        [1.63809967e+00, 4.63986015e+00, 2.96475012e+00],
        [7.90899280e-01, 3.03456974e+00, 4.71429510e+00],
        [7.10542736e-15, 2.40533972e+00, 1.99525711e+00],
        [3.15749931e+00, 1.26638985e+00, 5.53867502e+00],
        [2.97549820e+00, 4.11497974e+00, 4.97641510e+00],
        [2.78519821e+00, 2.36351967e+00, 3.03124506e+00],
        [4.44989967e+00, 4.75918007e+00, 2.32095808e+00],
        [5.56359863e+00, 2.67721987e+00, 4.33769507e+00],
        [2.25219917e+00, 6.16879940e-01, 4.34997600e-01],
        [4.89399910e+00, 2.07446957e+00, 1.45800020e+00],
        [2.47749901e+00, 3.83401966e+00, 0.00000000e+00]])
     
    ids = np.arange(1, data.particles.count+1) 
    np.random.shuffle(ids)
    particles.create_property('Particle Identifier', data=ids)
    # Create the 'Particle Type' property and add three ParticleType objects to 
    # it (unless they already exist from a previous script run).
    type_property = particles.create_property('Particle Type')
    if len(type_property.types) == 0: 
        type_property.types.append(ParticleType(id=1, name='Blue', color=(0,0,1)))
        type_property.types.append(ParticleType(id=2, name='Green', color=(0,1,0)))
    type_property[...] = [2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2]
    
    # Create a Bonds object and attach it to the Particles object. 
    bonds = particles.create_bonds(count=42, vis_params={'width': 0.6})
    # Create the 'Topology' bond property array and fill it with the connectivity information for three bonds.
    bonds.create_property('Topology',data=[[0,5],[0,1],[0,7],[0,3],[0,4],[0,10],[1,11],
        [1,10],[1,7],[1,5],[1,9],[3,7],[3,6],[3,5],[3,4],
        [4,10],[4,12],[4,7],[5,9],[5,7],[5,6],[6,8],[6,9],
        [6,7],[7,8],[7,11],[7,12],[7,10],[7,9],[9,11],[2,6],
        [2,3],[2,7],[2,4],[2,8],[2,12],[8,9],[8,12],[8,11],
        [10,12],[10,11],[11,12]])
    bond_ids = np.arange(1, data.particles.bonds.count+1)
    np.random.shuffle(bond_ids)
    bond_ids = bonds.create_property('Bond Identifier', data = bond_ids )
    # Create a SimulationCell object in the data collection (unless it already exists 
    # from a previous pass) and initialize the geometry by setting the 3x4 cell matrix.
    cell_matrix = [[6,0,0,0],[0,5,0,0],[0,0,6,0]]
    data.create_cell(cell_matrix, pbc=(False, False, False))

# Create a data pipeline with a script-based source object:
pipeline = Pipeline(source = PythonScriptSource(function = create))

# Calculate bond angles at particle:
pipeline.modifiers.append(CalculateBondAnglesAtParticle(center_particle = 3, mode = "Index", bond_mode = "Index"))

export_file(pipeline, "BondAngles.txt", "txt/table")